{
  "scores": {
    "leaderboard": [
      {
        "wpm": 163.2829373650108,
        "accuracy": 100,
        "referrer": "https://821625d8-1889-4f16-a0ce-957e8e18da3f-00-3csp0yyayuiyr.spock.repl.co/lessons/sleep_in",
        "text": "def sleep_in(weekday, vacation): return not weekday or vacation"
      },
      {
        "wpm": 149.7029702970297,
        "accuracy": 100,
        "referrer": "https://821625d8-1889-4f16-a0ce-957e8e18da3f-00-3csp0yyayuiyr.spock.repl.co/lessons/sleep_in",
        "text": "def sleep_in(weekday, vacation): return not weekday or vacation"
      },
      {
        "wpm": 147.08171206225683,
        "accuracy": 100,
        "referrer": "https://821625d8-1889-4f16-a0ce-957e8e18da3f-00-3csp0yyayuiyr.spock.repl.co/lessons/sleep_in",
        "text": "def sleep_in(weekday, vacation): return not weekday or vacation"
      },
      {
        "wpm": 140.52388289676423,
        "accuracy": 100,
        "referrer": "https://821625d8-1889-4f16-a0ce-957e8e18da3f-00-3csp0yyayuiyr.spock.repl.co/lessons/monkey_trouble",
        "text": "def monkey_trouble(a,b):return True if a and b or not a and not b else False"
      },
      {
        "wpm": 139.66309341500764,
        "accuracy": 100,
        "referrer": "https://821625d8-1889-4f16-a0ce-957e8e18da3f-00-3csp0yyayuiyr.spock.repl.co/lessons/monkey_trouble",
        "text": "def monkey_trouble(a,b):return True if a and b or not a and not b else False"
      },
      {
        "wpm": 136.70886075949366,
        "accuracy": 100,
        "referrer": "https://821625d8-1889-4f16-a0ce-957e8e18da3f-00-3csp0yyayuiyr.spock.repl.co/lessons/sleep_in",
        "text": "def sleep_in(weekday, vacation): return not weekday or vacation"
      },
      {
        "wpm": 135,
        "accuracy": 88.88888888888889,
        "referrer": "https://821625d8-1889-4f16-a0ce-957e8e18da3f-00-3csp0yyayuiyr.spock.repl.co/practice?code=ZGVmIHNsZWVwX2luKHdlZWtkYXksIHZhY2F0aW9uKTogcmV0dXJuIG5vdCB3ZWVrZGF5IG9yIHZhY2F0aW9u",
        "text": "def sleep_in(weekday, vacation): return not weekday or vacation"
      },
      {
        "wpm": 127.78702163061564,
        "accuracy": 100,
        "referrer": "https://821625d8-1889-4f16-a0ce-957e8e18da3f-00-3csp0yyayuiyr.spock.replit.dev/lessons/sleep_in",
        "text": "def sleep_in(weekday, vacation):\n\treturn not weekday or vacation"
      },
      {
        "wpm": 127.5747508305648,
        "accuracy": 98.4375,
        "referrer": "https://821625d8-1889-4f16-a0ce-957e8e18da3f-00-3csp0yyayuiyr.spock.repl.co/lessons/sleep_in",
        "text": "def sleep_in(weekday, vacation):\n\treturn not weekday or vacation"
      },
      {
        "wpm": 127.48735244519393,
        "accuracy": 90.47619047619048,
        "referrer": "https://821625d8-1889-4f16-a0ce-957e8e18da3f-00-3csp0yyayuiyr.spock.repl.co/lessons/sleep_in",
        "text": "def sleep_in(weekday, vacation): return not weekday or vacation"
      }
    ],
    "sum": 3654.53591697125,
    "tests": 38
  },
  "example_code": [
    "def a_bigger(a, b):\n  if a > b and (a - b) >= 2:\n    return True\n  else:\n    return False",
    "def a_bigger(a, b):\n  if a > b and a-b >= 2:\n    return True",
    "def with_no(str):\n  return \"No:\" + str",
    "def two_e(str):\n  count = 0\n  for ch in str:\n    if ch == 'e':\n      count = count + 1\n  if count == 2:\n    return True\n  else:\n    return False",
    "def pair_13(nums) {\n  for i in range(len(nums) - 1):\n    if nums[i]==13 and nums[i+1]==13:\n      return True\n  return False"
  ],
  "problems": {
    "Warmup-1": [
      {
        "title": "sleep_in",
        "description": "The parameter weekday is True if it is a weekday, and the parameter vacation is True if we are on vacation. We sleep in if it is not a weekday or we're on vacation. Return True if we sleep in.",
        "starter": "def sleep_in(weekday, vacation):\\n",
        "test_cases": [
          {
            "case": "sleep_in(False, False)",
            "solution": "True"
          },
          {
            "case": "sleep_in(True, False)",
            "solution": "False"
          },
          {
            "case": "sleep_in(False, True)",
            "solution": "True"
          },
          {
            "case": "sleep_in(True, True)",
            "solution": "True"
          }
        ]
      },
      {
        "title": "monkey_trouble",
        "description": "We have two monkeys, a and b, and the parameters a_smile and b_smile indicate if each is smiling. We are in trouble if they are both smiling or if neither of them is smiling. Return True if we are in trouble.",
        "starter": "def monkey_trouble(a_smile, b_smile):\\n",
        "test_cases": [
          {
            "case": "monkey_trouble(False, False)",
            "solution": "True"
          },
          {
            "case": "monkey_trouble(True, False)",
            "solution": "False"
          },
          {
            "case": "monkey_trouble(False, True)",
            "solution": "False"
          },
          {
            "case": "monkey_trouble(True, True)",
            "solution": "True"
          }
        ]
      },
      {
        "title": "sum_double",
        "description": "Given two int values, return their sum. Unless the two values are the same, then return double their sum.",
        "starter": "def sum_double(a, b):\\n",
        "test_cases": [
          {
            "case": "sum_double(1, 2)",
            "solution": "3"
          },
          {
            "case": "sum_double(3, 2)",
            "solution": "5"
          },
          {
            "case": "sum_double(2, 2)",
            "solution": "8"
          },
          {
            "case": "sum_double(-1, 0)",
            "solution": "-1"
          },
          {
            "case": "sum_double(3, 3)",
            "solution": "12"
          }
        ]
      },
      {
        "title": "diff21",
        "description": "Given an int n, return the absolute difference between n and 21, except return double the absolute difference if n is over 21.",
        "starter": "def diff21(n):\\n",
        "test_cases": [
          {
            "case": "diff21(19)",
            "solution": "2"
          },
          {
            "case": "diff21(10)",
            "solution": "11"
          },
          {
            "case": "diff21(21)",
            "solution": "0"
          },
          {
            "case": "diff21(22)",
            "solution": "2"
          },
          {
            "case": "diff21(25)",
            "solution": "8"
          }
        ]
      },
      {
        "title": "parrot_trouble",
        "description": "We have a loud talking parrot. The \"hour\" parameter is the current hour time in the range 0..23. We are in trouble if the parrot is talking and the hour is before 7 or after 20. Return True if we are in trouble.",
        "starter": "def parrot_trouble(talking, hour):\\n",
        "test_cases": [
          {
            "case": "parrot_trouble(True, 6)",
            "solution": "True"
          },
          {
            "case": "parrot_trouble(True, 7)",
            "solution": "False"
          },
          {
            "case": "parrot_trouble(False, 6)",
            "solution": "False"
          },
          {
            "case": "parrot_trouble(True, 21)",
            "solution": "True"
          },
          {
            "case": "parrot_trouble(False, 22)",
            "solution": "False"
          }
        ]
      },
      {
        "title": "makes10",
        "description": "Given 2 ints, a and b, return True if one if them is 10 or if their sum is 10.",
        "starter": "def makes10(a, b):\\n",
        "test_cases": [
          {
            "case": "makes10(9, 10)",
            "solution": "True"
          },
          {
            "case": "makes10(9, 9)",
            "solution": "False"
          },
          {
            "case": "makes10(1, 9)",
            "solution": "True"
          },
          {
            "case": "makes10(10, 1)",
            "solution": "True"
          },
          {
            "case": "makes10(10, 10)",
            "solution": "True"
          }
        ]
      },
      {
        "title": "near_hundred",
        "description": "Given an int n, return True if it is within 10 of 100 or 200. Note: abs(num) computes the absolute value of a number.",
        "starter": "def near_hundred(n):\\n",
        "test_cases": [
          {
            "case": "near_hundred(93)",
            "solution": "True"
          },
          {
            "case": "near_hundred(90)",
            "solution": "True"
          },
          {
            "case": "near_hundred(89)",
            "solution": "False"
          },
          {
            "case": "near_hundred(110)",
            "solution": "True"
          },
          {
            "case": "near_hundred(111)",
            "solution": "False"
          }
        ]
      }
    ],
    "Warmup-2": [
      {
        "title": "string_times",
        "description": "Given a string and a non-negative int n, return a larger string that is n copies of the original string.",
        "starter": "def string_times(str, n):\\n",
        "test_cases": [
          {
            "case": "string_times('Hi', 2)",
            "solution": "HiHi"
          },
          {
            "case": "string_times('Oh Boy!', 2)",
            "solution": "Oh Boy!Oh Boy!"
          },
          {
            "case": "string_times('Hi', 5)",
            "solution": "HiHiHiHiHi"
          },
          {
            "case": "string_times('x', 4)",
            "solution": "xxxx"
          },
          {
            "case": "string_times('code', 3)",
            "solution": "codecodecode"
          }
        ]
      },
      {
        "title": "front_times",
        "description": "Given a string and a non-negative int n, we'll say that the front of the string is the first 3 chars, or whatever is there if the string is less than length 3. Return n copies of the front;",
        "starter": "def front_times(str, n):\\n",
        "test_cases": [
          {
            "case": "front_times('Chocolate', 2)",
            "solution": "ChoCho"
          },
          {
            "case": "front_times('Chocolate', 3)",
            "solution": "ChoChoCho"
          },
          {
            "case": "front_times('Abc', 3)",
            "solution": "AbcAbcAbc"
          },
          {
            "case": "front_times('')",
            "solution": ""
          },
          {
            "case": "front_times('Abc', 0)",
            "solution": ""
          }
        ]
      },
      {
        "title": "string_bits",
        "description": "Given a string, return a new string made of every other char starting with the first, so \"Hello\" yields \"Hlo\".",
        "starter": "def string_bits(str):\\n",
        "test_cases": [
          {
            "case": "string_bits('Hello')",
            "solution": "Hlo"
          },
          {
            "case": "string_bits('Chocolate')",
            "solution": "Coot"
          },
          {
            "case": "string_bits('pi')",
            "solution": "p"
          },
          {
            "case": "string_bits('Hello Kitten')",
            "solution": "HloKte"
          },
          {
            "case": "string_bits(hxaxpxpxy)",
            "solution": "happy"
          }
        ]
      },
      {
        "title": "string_splosion",
        "description": "Given a non-empty string like \"Code\" return a string like \"CCoCodCode\".",
        "starter": "def string_splosion(str):\\n",
        "test_cases": [
          {
            "case": "string_splosion('Code')",
            "solution": "CCoCodCode"
          },
          {
            "case": "string_splosion('x')",
            "solution": "x"
          },
          {
            "case": "string_splosion('Kitten')",
            "solution": "KKiKitKittKitteKitten"
          },
          {
            "case": "string_splosion('Good')",
            "solution": "GGoGooGood"
          },
          {
            "case": "string_splosion('ab')",
            "solution": "aab"
          }
        ]
      },
      {
        "title": "last2",
        "description": "Given a string, return the count of the number of times that a substring length 2 appears in the string and also as the last 2 chars of the string, so \"hixxxhi\" yields 1 (we won't count the end substring).",
        "starter": "def last2(str):\\n",
        "test_cases": [
          {
            "case": "last2('xxaxxaxxaxx')",
            "solution": "3"
          },
          {
            "case": "last2('13121311')",
            "solution": "0"
          },
          {
            "case": "last2('hi')",
            "solution": "0"
          },
          {
            "case": "last2('')",
            "solution": "0"
          },
          {
            "case": "last2('xxxx')",
            "solution": "2"
          }
        ]
      }
    ],
    "String-1": [
      {
        "title": "hello_name",
        "description": "Given a string name, e.g. \"Bob\", return a greeting of the form \"Hello Bob!\".",
        "starter": "def hello_name(name):\\n",
        "test_cases": [
          {
            "case": "hello_name('Bob')",
            "solution": "Hello Bob!"
          },
          {
            "case": "hello_name('xyz!')",
            "solution": "Hello xyz!!"
          },
          {
            "case": "hello_name('Omega')",
            "solution": "Hello Omega!"
          },
          {
            "case": "hello_name('Alpha')",
            "solution": "Hello Alpha!"
          },
          {
            "case": "hello_name('Hello')",
            "solution": "Hello Hello!"
          }
        ]
      },
      {
        "title": "make_abba",
        "description": "Given two strings, a and b, return the result of putting them together in the order abba, e.g. \"Hi\" and \"Bye\" returns \"HiByeByeHi\".",
        "starter": "def make_abba(a, b):\\n",
        "test_cases": [
          {
            "case": "make_abba('Hi', 'Bye')",
            "solution": "HiByeByeHi"
          },
          {
            "case": "make_abba('x', '')",
            "solution": "xx"
          },
          {
            "case": "make_abba('', 'y')",
            "solution": "yy"
          },
          {
            "case": "make_abba('aaa', 'bbb')",
            "solution": "aaabbbbbbaaa"
          },
          {
            "case": "make_abba('Ya', 'Ya')",
            "solution": "YaYaYaYa"
          }
        ]
      },
      {
        "title": "make_tags",
        "description": "The web is built with HTML strings like \"<i>Yay</i>\" which draws Yay as italic text. In this example, the \"i\" tag makes <i> and </i> which surround the word \"Yay\". Given tag and word strings, create the HTML string with tags around the word, e.g. \"<i>Yay</i>\".",
        "starter": "def make_tags(tag, word):\\n",
        "test_cases": [
          {
            "case": "make_tags('i', 'Yay')",
            "solution": "<i>Yay</i>"
          },
          {
            "case": "make_tags('cite', 'Yay')",
            "solution": "<cite>Yay</cite>"
          },
          {
            "case": "make_tags('body', 'Heart')",
            "solution": "<body>Heart</body>"
          },
          {
            "case": "make_tags('i', 'i')",
            "solution": "<i>i</i>"
          },
          {
            "case": "make_tags('i', '')",
            "solution": "<i></i>"
          }
        ]
      },
      {
        "title": "make_out_word",
        "description": "Given an \"out\" string length 4, such as \"<<>>\", and a word, return a new string where the word is in the middle of the out string, e.g. \"<<word>>\". ",
        "starter": "def make_out_word(out, word):\\n",
        "test_cases": [
          {
            "case": "make_out_word('<<>>', 'Yay')",
            "solution": "<<Yay>>"
          },
          {
            "case": "make_out_word('<<>>', 'WooHoo')",
            "solution": "<<WooHoo>>"
          },
          {
            "case": "make_out_word('[[]]', 'word')",
            "solution": "[[word]]"
          },
          {
            "case": "make_out_word('HHoo', 'Hello')",
            "solution": "HHHellooo"
          },
          {
            "case": "make_out_word('abyz', 'YAY')",
            "solution": "abYAYyz"
          }
        ]
      },
      {
        "title": "extra_end",
        "description": "Given a string, return a new string made of 3 copies of the last 2 chars of the original string. The string length will be at least 2.",
        "starter": "def extra_end(str):\\n",
        "test_cases": [
          {
            "case": "extra_end('Hello')",
            "solution": "lololo"
          },
          {
            "case": "extra_end('ab')",
            "solution": "ababab"
          },
          {
            "case": "extra_end('Hi')",
            "solution": "HiHiHi"
          },
          {
            "case": "extra_end('Candy')",
            "solution": "dydydy"
          },
          {
            "case": "extra_end('Code')",
            "solution": "dedede"
          }
        ]
      }
    ],
    "String-2": [
      {
        "title": "double_char",
        "description": "Given a string, return a string where for every char in the original, there are two chars.",
        "starter": "def double_char(str):\\n",
        "test_cases": [
          {
            "case": "double_char('The')",
            "solution": "TThhee"
          },
          {
            "case": "double_char('AAbb')",
            "solution": "AAAAbbbb"
          },
          {
            "case": "double_char('Hi-There')",
            "solution": "HHii--TThheerree"
          },
          {
            "case": "double_char('!!')",
            "solution": "!!!!"
          },
          {
            "case": "double_char('')",
            "solution": ""
          }
        ]
      },
      {
        "title": "count_hi",
        "description": "Return the number of times that the string \"hi\" appears anywhere in the given string.",
        "starter": "def count_hi(str):\\n",
        "test_cases": [
          {
            "case": "count_hi('abc hi ho')",
            "solution": "1"
          },
          {
            "case": "count_hi('ABChi hi')",
            "solution": "2"
          },
          {
            "case": "count_hi('hiHIhi')",
            "solution": "2"
          },
          {
            "case": "count_hi('')",
            "solution": "0"
          },
          {
            "case": "count_hi('Hi is no HI on ahI')",
            "solution": "0"
          }
        ]
      },
      {
        "title": "cat_dog",
        "description": "Return True if the string \"cat\" and \"dog\" appear the same number of times in the given string.",
        "starter": "def cat_dog(str):\\n",
        "test_cases": [
          {
            "case": "cat_dog('dogogcat')",
            "solution": "True"
          },
          {
            "case": "cat_dog('catxdogxdogxcat')",
            "solution": "True"
          },
          {
            "case": "cat_dog('catxxdogxxxdog')",
            "solution": "False"
          },
          {
            "case": "cat_dog('1cat1cadodog')",
            "solution": "True"
          },
          {
            "case": "cat_dog('')",
            "solution": "True"
          }
        ]
      },
      {
        "title": "count_code",
        "description": "Return the number of times that the string \"code\" appears anywhere in the given string, except we'll accept any letter for the 'd', so \"cope\" and \"cooe\" count.",
        "starter": "def count_code(str):\\n",
        "test_cases": [
          {
            "case": "count_code('aaacodebbb')",
            "solution": "1"
          },
          {
            "case": "count_code('cozexxcope')",
            "solution": "2"
          },
          {
            "case": "count_code('cozcop')",
            "solution": "0"
          },
          {
            "case": "count_code('AAcodeBBcoleCCccoreDD')",
            "solution": "3"
          },
          {
            "case": "count_code('')",
            "solution": "0"
          }
        ]
      },
      {
        "title": "end_other",
        "description": "Given two strings, return True if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be \"case sensitive\"). Note: s.lower() returns the lowercase version of a string.",
        "starter": "def end_other(a, b):\\n",
        "test_cases": [
          {
            "case": "end_other('Hiabc', 'abc')",
            "solution": "True"
          },
          {
            "case": "end_other('abc', 'abXabc')",
            "solution": "True"
          },
          {
            "case": "end_other('Hiabcx', 'bc')",
            "solution": "False"
          },
          {
            "case": "end_other('abcXYZ', 'abcDEF')",
            "solution": "False"
          },
          {
            "case": "end_other('ab', '12ab')",
            "solution": "True"
          }
        ]
      }
    ]
  }
}